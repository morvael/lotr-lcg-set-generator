useLibrary('imageutils');
useLibrary('threads');
importPackage(arkham.project);
importClass(java.io.File);
importClass(javax.xml.parsers.DocumentBuilder);
importClass(javax.xml.parsers.DocumentBuilderFactory);
importClass(org.w3c.dom.Document);
importClass(org.w3c.dom.Element);
importClass(org.w3c.dom.Node);
importClass(org.w3c.dom.NodeList);

var translate = {};
translate['Ally'] = {'English': 'Ally', 'French': 'Alli\u00e9', 'German': 'Verb\u00fcndeter', 'Spanish': 'Aliado'};
translate['Attachment'] = {'English': 'Attachment', 'French': 'Attachement', 'German': 'Verst\u00e4rkung', 'Spanish': 'Vinculada'};
translate['Contract'] = {'English': 'Contract', 'French': 'Contrat', 'German': 'Abkommen', 'Spanish': 'Contrato'};
translate['Encounter Side Quest'] = {'English': 'Side Quest', 'French': 'Qu\u00eate Annexe', 'German': 'Nebenabenteuer', 'Spanish': 'Misi\u00f3n Secundaria'};
translate['Enemy'] = {'English': 'Enemy', 'French': 'Ennemi', 'German': 'Gegner', 'Spanish': 'Enemigo'};
translate['Event'] = {'English': 'Event', 'French': '\u00c9v\u00e9nement', 'German': 'Ereignis', 'Spanish': 'Evento'};
translate['Hero'] = {'English': 'Hero', 'French': 'H\u00e9ros', 'German': 'Held', 'Spanish': 'H\u00e9roe'};
translate['Location'] = {'English': 'Location', 'French': 'Lieu', 'German': 'Ort', 'Spanish': 'Lugar'};
translate['Objective'] = {'English': 'Objective', 'French': 'Objectif', 'German': 'Ziel', 'Spanish': 'Objetivo'};
translate['Objective Ally'] = {'English': 'Objective-Ally', 'French': 'Objectif-Alli\u00e9', 'German': 'Ziel-Verb\u00fcndeter', 'Spanish': 'Objetivo-Aliado'};
translate['Player Side Quest'] = {'English': 'Side Quest', 'French': 'Qu\u00eate Annexe', 'German': 'Nebenabenteuer', 'Spanish': 'Misi\u00f3n Secundaria'};
translate['Quest'] = {'English': 'Quest', 'French': 'Qu\u00eate', 'German': 'Abenteuer', 'Spanish': 'Misi\u00f3n'};
translate['Treachery'] = {'English': 'Treachery', 'French': 'Tra\u00eetrise', 'German': 'Verrat', 'Spanish': 'Traici\u00f3n'};
translate['Encounter Keyword'] = {'English': 'Encounter.', 'French': 'Rencontre.', 'German': 'Begegnung.', 'Spanish': 'Encuentro.'};
translate['Illustration'] = {'English': 'Illus.', 'French': 'Illus.', 'German': 'Illus.', 'Spanish': 'Ilus.'};
translate['Unknown Artist'] = {'English': 'Unknown Artist', 'French': 'Artiste Inconnu', 'German': 'Unbekannter K\u00fcnstler', 'Spanish': 'Artista Desconocido'};
translate['Victory'] = {'English': 'Victory', 'French': 'Victoire', 'German': 'Sieg', 'Spanish': 'Victoria'};

Thread.busyWindow(main, 'Updating cards...', true);

function main(progress, target) {
	var icons = [];
	var iconFiles = project.findChild('imagesIcons').iterator();
	while (iconFiles.hasNext()) {
		let icon = (iconFiles.next() + '').replace(/\.png$/g, '');
		icons.push(icon);
	}

	var xmlFiles = project.findChild('XML').iterator();
	while (xmlFiles.hasNext()) {
		run(progress, target, xmlFiles.next() + '', icons);
	}
	return;
}

function run(progress, target, filename, icons) {
	var setID = filename.split('.')[0];
	var lang = filename.split('.')[1];
	var backTypes = ['Presentation', 'Quest', 'Rules'];
	var fXmlFile = new File(getProjectMember('XML/').file, filename + '.xml');
	Console.err.println('\nReading ' + fXmlFile);
	var dbFactory = DocumentBuilderFactory.newInstance();
	var dBuilder = dbFactory.newDocumentBuilder();
	var doc = dBuilder.parse(fXmlFile);
	var docElement = doc.getDocumentElement();
	docElement.normalize();
	var cardSet = docElement.getAttribute('name');
	var copyrightText = docElement.getAttribute('copyright');

	var customIcon;
	var cardTypes = ['Ally', 'Attachment', 'Enemy', 'Event', 'Hero', 'Location', 'Objective', 'Objective Ally',
			 'Presentation', 'Quest', 'Rules', 'Side Quest', 'Treachery'];

	var pluginVersion = doc.getDocumentElement().getAttribute('pluginVersion') + '';
	if (pluginVersion == 'new') {
		customIcon = 'Custom';
		cardTypes.push('Contract');
	}
	else {
		customIcon = 'CustomIcon';
	}

	var jpg300NoBleed = false;
	var png300NoBleed = false;
	var png300Bleed = false;
	var png800Bleed = false;
	if (doc.getDocumentElement().getAttribute('jpg300NoBleed') + '' == '1') {
		jpg300NoBleed = true;
	}
	if (doc.getDocumentElement().getAttribute('png300NoBleed') + '' == '1') {
		png300NoBleed = true;
	}
	if (doc.getDocumentElement().getAttribute('png300Bleed') + '' == '1') {
		png300Bleed = true;
	}
	if (doc.getDocumentElement().getAttribute('png800Bleed') + '' == '1') {
		png800Bleed = true;
	}

	var nList = doc.getElementsByTagName('card');
	for (let i = 0; i < nList.getLength(); i++) {
		let nNode = nList.item(i);
		if (nNode.getAttribute('skip') == '1') {
			continue;
		}

		// Create a dictionary called card that contains all the card info in the xml file
		let card = {};
		card['Set'] = cardSet;
		card['octgn'] = nNode.getAttribute('id');
		card['Name'] = nNode.getAttribute('name');
		let propList = nNode.getElementsByTagName('property');
		for (let j = 0; j < propList.getLength(); j++) {
			let nProp = propList.item(j);
			if (!nProp.getParentNode().isSameNode(nNode)) {
				continue;
			}
			if (nProp && nProp.getNodeType() == Node.ELEMENT_NODE) {
				card[nProp.getAttribute('name')] = nProp.getAttribute('value');
			}
		}
		let altList = nNode.getElementsByTagName('alternate');
		for (let k = 0; k < altList.getLength(); k++) {
			let nAlternate = altList.item(k);
			if (nAlternate && nAlternate.getNodeType() == Node.ELEMENT_NODE) {
				card['BName'] = nAlternate.getAttribute('name');
				let altPropList = nAlternate.getElementsByTagName('property');
				for (let l = 0; l < altPropList.getLength(); l++) {
					let nAltProp = altPropList.item(l);
					if (nAltProp && nAltProp.getNodeType() == Node.ELEMENT_NODE) {
						card['B' + nAltProp.getAttribute('name')] = nAltProp.getAttribute('value');
					}
				}
			}
		}

		if (!card['Type']) {
			Console.err.println('\nNo card type for ' + card['Name']);
			continue;
		}
		if (cardTypes.indexOf(card['Type'] + '') == -1) {
			Console.err.println('\nUnknown card type for ' + card['Name'] + ': ' + card['Type']);
			continue;
		}
		if (card['BType'] && cardTypes.indexOf(card['BType'] + '') == -1) {
			Console.err.println('\nUnknown card type for ' + card['Name'] + ': ' + card['BType']);
			continue;
		}
		// Console.err.println('\nProcessing ' + card['Name']);
		if (card['Type'] == 'Side Quest') {
			if (card['Encounter Set']) {
				card['Type'] = 'Encounter Side Quest';
			}
			else {
				card['Type'] = 'Player Side Quest';
			}
		}
		if (card['BType'] == 'Side Quest') {
			if (card['Encounter Set']) {
				card['BType'] = 'Encounter Side Quest';
			}
			else {
				card['BType'] = 'Player Side Quest';
			}
		}

		if (card['Type'] == 'Quest' && card['BQuest Points']) {
			card['Quest Points'] = card['BQuest Points'];
		}

		let playerCopies = false;
		if (['Ally', 'Attachment', 'Event', 'Player Side Quest'].indexOf(card['Type'] + '') > -1 && card['Quantity'] == 3) {
			playerCopies = true;
			card['Quantity'] = 1;
		}

		for (let j = 0; j < card['Quantity']; j++) {
			let sides = ['front'];
			if (backTypes.indexOf(card['Type'] + '') == -1 && card['BName']) {
				sides.push('back');
			}
			for (let idx = 0; idx < sides.length; idx++) {
				let side = sides[idx];
				let cardName, cardType, keywords, traits, suffix, mapping;
				if (side == 'front') {
					cardName = card['Name'];
					cardType = card['Type'] + '';
					keywords = card['Keywords'];
					traits = card['Traits'];
					suffix = '';
					mapping = [
						// Convert from member name in xml file to member name in eon file
						// [eon,xml]
						['CollectionNumber', 'Card Number'],
						['Name', 'Name'],
						['Unique', 'Unique'],
						['Template', 'Sphere'],
						['Trait', 'Traits'],
						['ResourceCost', 'Cost'],
						['ThreatCost', 'Cost'],
						['Stage', 'Cost'],
						['Engagement', 'Engagement Cost'],
						['Threat', 'Threat'],
						['Willpower', 'Willpower'],
						['Attack', 'Attack'],
						['Defense', 'Defense'],
						['HitPoints', 'Health'],
						['Progress', 'Quest Points'],
						['Victory', 'Victory Points'],
						['OptionRight', 'Victory Points'],
						['Rules', 'Text'],
						['Description', 'Text'],
						['Shadow', 'Shadow'],
						['Flavour', 'Flavour'],
						['Story', 'Flavour'],
						['Artist-external', 'Artist'],  // old plugin
						['Artist', 'Artist'],  // new plugin
						['Adventure', 'Adventure']
					];
					if (backTypes.indexOf(cardType) > -1) {
						mapping = mapping.concat([
							['NameBack', 'BName'],
							['RulesBack', 'BText'],
							['FlavourBack', 'BFlavour'],
							['StoryBack', 'BFlavour'],
							['ArtistBack-external', 'BArtist'],  // old plugin
							['ArtistBack', 'BArtist']  // new plugin
						]);
					}
				}
				else {
					cardName = card['BName'];
					cardType = card['BType'] + '';
					if (backTypes.indexOf(cardType) > -1) {
						Console.err.println('\nIncorrect card type for back side for ' + card['Name'] + ': ' + cardType);
						continue;
					}
					keywords = card['BKeywords'];
					traits = card['BTraits'];
					suffix = '-2';
					mapping = [
						// Convert from member name in xml file to member name in eon file
						// [eon,xml]
						['CollectionNumber', 'Card Number'],
						['Name', 'BName'],
						['Unique', 'BUnique'],
						['Template', 'BSphere'],
						['Trait', 'BTraits'],
						['ResourceCost', 'BCost'],
						['ThreatCost', 'BCost'],
						['Stage', 'BCost'],
						['Engagement', 'BEngagement Cost'],
						['Threat', 'BThreat'],
						['Willpower', 'BWillpower'],
						['Attack', 'BAttack'],
						['Defense', 'BDefense'],
						['HitPoints', 'BHealth'],
						['Progress', 'BQuest Points'],
						['Victory', 'BVictory Points'],
						['OptionRight', 'BVictory Points'],
						['Rules', 'BText'],
						['Description', 'BText'],
						['Shadow', 'BShadow'],
						['Flavour', 'BFlavour'],
						['Story', 'BFlavour'],
						['Artist-external', 'BArtist'],  // old plugin
						['Artist', 'BArtist'],  // new plugin
						['Adventure', 'Adventure']
					];
				}

				// Create a new .eon file, using the appropriate template in the template folder
				progress.status = cardName;
				let newCard = ResourceKit.getGameComponentFromFile(getProjectMember('Templates/' + cardType + '.eon').file, false);
				let s = newCard.settings;

				// change the details in the template card
				for (let k = 0; k < mapping.length; k++) {
					let nEon = mapping[k][0];
					let nXml = mapping[k][1];
					let vXml = card[nXml];
					if (!vXml) {
						if (['Sphere', 'BSphere'].indexOf(nXml + '') == -1) {
							s.set(nEon, '');
						}
						continue;
					}
					if (vXml == '-') {
						vXml = 'minus';
					}
					if (nXml == 'Victory Points' || nXml == 'BVictory Points') {
						if (vXml.match(/^[0-9]+$/)) {
							vXml = translate['Victory'][lang].toUpperCase() + ' ' + vXml;
						}
					}
					if (nXml == 'Artist' || nXml == 'BArtist') {
						if (vXml == 'Unknown Artist') {
							vXml = translate['Unknown Artist'][lang];
						}

						if (pluginVersion == 'old') {
							if (nEon == 'Artist-external' || nEon == 'ArtistBack-external') {
								vXml = translate['Illustration'][lang] + ' ' + vXml;
							}
						}
					}
					if (nXml == 'Text' || nXml == 'BText') {
						if (keywords) {
							vXml = keywords + '\n\n' + vXml;
						}
						if (['Hero', 'Ally', 'Attachment', 'Event', 'Enemy', 'Location', 'Treachery', 'Objective', 'Objective Ally'
							].indexOf(cardType) > -1 && !traits) {
							vXml = '\n' + vXml;
						}
					}
					vXml = markUp(vXml, nXml, lang, setID);
					if (nXml == 'Flavour' || nXml == 'BFlavour') {
						vXml = '<left>' + vXml;
					}
					s.set(nEon, vXml);
				}

				if (cardType == 'Presentation') {
					s.set('Story', '');
					s.set('Flavour', '');
					if (pluginVersion == 'new') {
						s.set('Template', 'Classic' + s.get('Template'));
						s.set('BackgroundBack-portrait-template', 'project:Templates/Rules-Background.png');
					}
					else {
						s.set('Artist-external', ' ');
					}
				}
				else if (cardType == 'Rules') {
					s.set('Name', '');
					s.set('Story', '');
					s.set('StoryBack', '');
					s.set('Flavour', '');
					s.set('FlavourBack', '');
					if (pluginVersion == 'new') {
						s.set('Background-portrait-template', 'project:Templates/Rules-Background.png');
						s.set('BackgroundBack-portrait-template', 'project:Templates/Rules-Background.png');
					}
				}

				if (pluginVersion == 'new') {
					s.set('Body-style', 'FAMILY: {Eons.namedObjects.LRL.BodyFont}; SIZE: 16; FOREGROUND: #000000');
					if (cardType == 'Presentation') {
						s.set('LRL-IllustratorShort', ' ');
					}
					else {
						s.set('LRL-IllustratorShort', translate['Illustration'][lang]);
					}
					if (['Player Side Quest', 'Encounter Side Quest', 'Quest'].indexOf(cardType) > -1) {
						s.set('Artist-region', '302,754,170,24');
						s.set('Copyright-region', '474,754,272,24');
						s.set('Collection-portrait-clip-region', '860,754,24,24');
						s.set('CollectionNumber-region', '886,754,30,24');
					}
					else {
						s.set('Artist-region', '116,1054,170,24');
						s.set('Copyright-region', '278,1054,272,24');
						s.set('Collection-portrait-clip-region', '664,1054,24,24');
						s.set('CollectionNumber-region', '690,1054,30,24');
					}
				}
				else {
				}

				if (['Event', 'Treachery', 'Player Side Quest', 'Encounter Side Quest', 'Quest', 'Rules', 'Contract'].indexOf(cardType) > -1) {
					s.set('Unique', '');
				}
				if (cardType == 'Quest') {
					s.set('NameShare', 0);
				}
				if (side == 'front') {
					if (card['Artwork']) {
						s.set('Portrait-external-path', 'project:imagesRaw/' + card['Artwork']);
						if (card['PanX'] && card['PanY'] && card['Scale']) {
							s.set('Portrait-external-panx', card['PanX']);
							s.set('Portrait-external-pany', card['PanY']);
							s.set('Portrait-external-scale', card['Scale'] / 100);
						}
					}
					if (cardType == 'Quest') {
						if (card['BArtwork']) {
							s.set('PortraitBack-external-path', 'project:imagesRaw/' + card['BArtwork']);
							s.set('PortraitShare', 0);
							if (card['BPanX'] && card['BPanY'] && card['BScale']) {
								s.set('PortraitBack-external-panx', card['BPanX']);
								s.set('PortraitBack-external-pany', card['BPanY']);
								s.set('PortraitBack-external-scale', card['BScale'] / 100);
							}
						}
						else if (card['Artwork']) {
							s.set('PortraitBack-external-path', 'project:imagesRaw/' + card['Artwork']);
							if (card['PanX'] && card['PanY'] && card['Scale']) {
								s.set('PortraitBack-external-panx', card['PanX']);
								s.set('PortraitBack-external-pany', card['PanY']);
								s.set('PortraitBack-external-scale', card['Scale'] / 100);
							}
						}
					}
				}
				else {
					if (card['BArtwork']) {
						s.set('Portrait-external-path', 'project:imagesRaw/' + card['BArtwork']);
						if (card['BPanX'] && card['BPanY'] && card['BScale']) {
							s.set('Portrait-external-panx', card['BPanX']);
							s.set('Portrait-external-pany', card['BPanY']);
							s.set('Portrait-external-scale', card['BScale'] / 100);
						}
					}
				}

				s.set('CollectionInfo', ' ');

				if ((cardType == 'Presentation') || (cardType == 'Rules')) {
					if (s.get('Victory').search('/') > -1) {
						s.set('Page', s.get('Victory').split('/')[0]);
						s.set('PageTotal', s.get('Victory').split('/')[1]);
					}
					s.set('Type', ' ');
					s.set('Copyright', '');
					if (pluginVersion == 'new') {
						s.set('Collection', 'Empty');
					}
					else {
						s.set('Collection', 'EmptyIcon');
					}
				}
				else {
					s.set('Type', translate[cardType][lang].toUpperCase());
					s.set('Copyright', copyrightText);
					let iconName = fixSpecialSymbols(card['Set']).replace(/ /g, '-');
					if (icons.indexOf(iconName) > -1) {
						s.set('Collection', customIcon);
						s.set('Collection-external-path', 'project:imagesIcons/' + iconName + '.png');
					}
					else {
						s.set('Collection', convertIconName(card['Set']));
					}
				}

				if (card['Encounter Set']) {
					let iconName = fixSpecialSymbols(card['Encounter Set']).replace(/ /g, '-');
					if (icons.indexOf(iconName) > -1) {
						s.set('EncounterSet', customIcon);
						s.set('EncounterSet-external-path', 'project:imagesIcons/' + iconName + '.png');
					}
					else {
						s.set('EncounterSet', convertIconName(card['Encounter Set']));
					}
				}
				if (card['Additional Encounter Sets']) {
					let encounterSets = card['Additional Encounter Sets'].split(',');
					for (let k = 0; k < encounterSets.length; k++) {
						let iconName = fixSpecialSymbols(encounterSets[k].trim()).replace(/ /g, '-');
						if (icons.indexOf(iconName) > -1) {
							s.set('EncounterSet' + (k + 1), customIcon);
							s.set('EncounterSet' + (k + 1) + '-external-path',
								'project:imagesIcons/' + iconName + '.png');
						}
						else {
							s.set('EncounterSet' + (k + 1), convertIconName(encounterSets[k].trim()));
						}
					}
				}
				if (card['Encounter Set Number']) {
					s.set('EncounterSetNumber', parseInt(card['Encounter Set Number']) + j);
				}
				if (card['Encounter Set Total']) {
					s.set('EncounterSetTotal', card['Encounter Set Total']);
				}
				if (card['Removed for Easy Mode'] && j >= parseInt(card['Quantity']) - parseInt(card['Removed for Easy Mode'])) {
					s.set('Template', 'Gold');
				}

				let copy;
				if (playerCopies) {
					copy = 'p';
				}
				else {
					copy = j + 1;
				}

				let back;
				if (side == 'back') {
					back = '-';
				}
				else if (backTypes.indexOf(cardType) > -1 || card['BName']) {
					back = '-';
				}
				else if (['Hero', 'Ally', 'Attachment', 'Event', 'Player Side Quest', 'Contract'].indexOf(cardType) > -1 &&
					(keywords + '').search(translate['Encounter Keyword'][lang]) == -1) {
					back = 'p';
				}
				else {
					back = 'e';
				}

				let fname = (Array(4 - (card['Card Number'] + '').length).join('0') + card['Card Number'] + '-' + copy + '-' +
					back + '-' + escapeFileName(card['Name']) + Array(50).join('-')).substring(0, 50) + card['octgn'] + suffix;
				progress.status = fname;
				ResourceKit.writeGameComponentToFile(new File(getProjectMember('Cards/').file, fname + '.' + setID + '.' + lang + '.eon'), newCard);
				exportCard(newCard, fname, setID, lang, jpg300NoBleed, png300NoBleed, png300Bleed, png800Bleed);
			}
		}
	}
	return;
}

function exportCard(card, fname, setID, lang, jpg300NoBleed, png300NoBleed, png300Bleed, png800Bleed) {
	var sheets = card.createDefaultSheets();
	var numSheets;
	if (card.getFaceStyle() + '' == 'TWO_FACES') {
		numSheets = 2;
	}
	else {
		numSheets = 1;
	}

	for (let i = 0; i < numSheets; i++ ) {
		let bi, file;

		if (jpg300NoBleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, 300);
			file = new File(getProjectMember('Export/jpg300NoBleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_JPEG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_JPEG, 0.9, false, 300);
		}

		if (png300NoBleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, 300);
			file = new File(getProjectMember('Export/png300NoBleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_PNG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_PNG, 1, false, 300);
		}

		if (png300Bleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, 300, true);
			file = new File(getProjectMember('Export/png300Bleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_PNG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_PNG, 1, false, 300);
		}

		if (png800Bleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, 800, true);
			file = new File(getProjectMember('Export/png800Bleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_PNG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_PNG, 1, false, 800);
		}
	}
}

function fixSpecialSymbols(value) {
	value = value + '';
	return value.replace(/\u00c2/g, 'A').replace(/[\u00da\u00db]/g, 'U').replace(/\u00e2/g, 'a').replace(/[\u00fa\u00fb]/g, 'u');
}

function capitalizeWord(value) {
	return value.charAt(0).toUpperCase() + value.slice(1);
}

function capitalizeText(value) {
	value = value + '';
	value = value.split(' ').map(capitalizeWord).join(' ');
	value = value.split('-').map(capitalizeWord).join('-');
	value = value.split('(').map(capitalizeWord).join('(');
	return value;
}

function convertIconName(value) {
	value = fixSpecialSymbols(value);
	value = capitalizeText(value);
	value = value.replace(/[\-',\(\) ]/g, '');
	return value;
}

function escapeFileName(value) {
	value += '';
	return value.replace(/[<>:"\/\\|?*]/g, ' ');
}

function markUp(vXml, nXml, lang, setID) {
	vXml += '';
	if (lang == 'English') {
		vXml = vXml.replace(/\b(Quest Resolution)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(Valour )?(Resource |Planning |Quest |Travel |Encounter |Combat |Refresh )?(Action):/g, '[b]$1$2$3[/b]:');
		vXml = vXml.replace(/\b(When Revealed|Setup|Forced|Valour Response|Response|Travel|Shadow|Resolution):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Condition)\b/g, '[bi]$1[/bi]');
	}
	else if (lang == 'French') {
		vXml = vXml.replace(/\b(R\u00e9solution de la qu\u00eate)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(\[Vaillance\] )?(\[Ressource\] |\[Organisation\] |\[Qu\u00eate\] |\[Voyage\] |\[Rencontre\] |\[Combat\] |\[Restauration\] )?(Action):/g, '[b]$1$2$3[/b]:');
		vXml = vXml.replace(/\b(Une fois r\u00e9v\u00e9l\u00e9e|Mise en place|Forc\u00e9|\[Vaillance\] R\u00e9ponse|R\u00e9ponse|Trajet|Ombre|R\u00e9solution):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Condition)\b/g, '[bi]$1[/bi]');
	}
	else if (lang == 'German') {
		vXml = vXml.replace(/\b(Abenteuer bestehen)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(Ehrenvolle )?(Ressourcenaktion|Planungsaktion|Abenteueraktion|Reiseaktion|Begegnungsaktion|Kampfaktion|Auffrischungsaktion|Aktion):/g, '[b]$1$2[/b]:');
		vXml = vXml.replace(/\b(Wenn aufgedeckt|Vorbereitung|Erzwungen|Ehrenvolle Reaktion|Reaktion|Reise|Schatten|Aufl\u00f6sung):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Zustand)\b/g, '[bi]$1[/bi]');
	}
	else if (lang == 'Spanish') {
		vXml = vXml.replace(/\b(Resoluci\u00f3n de la misi\u00f3n)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(Acci\u00f3n)( de Recursos| de Planificaci\u00f3n| de Misi\u00f3n| de Viaje| de Encuentros| de Combate| de Recuperaci\u00f3n)?( de Valor)?:/g, '[b]$1$2$3[/b]:');
		vXml = vXml.replace(/\b(Al ser revelada|Preparaci\u00f3n|Obligado|Respuesta de Valor|Respuesta|Viaje|Sombra|Resoluci\u00f3n):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Condici\u00f3n)\b/g, '[bi]$1[/bi]');
	}

	vXml = vXml.replace(/ +(\n|$)/g, '$1');
	vXml = vXml.replace(/</ig, '[lt]');
	vXml = vXml.replace(/>/ig, '[gt]');
	vXml = vXml.replace(/\[lt\]/ig, '<lt>');
	vXml = vXml.replace(/\[gt\]/ig, '<gt>');
	vXml = vXml.replace(/\[unique\]/ig, '<uni>');
	vXml = vXml.replace(/\[threat\]/ig, '<thr>');
	vXml = vXml.replace(/\[attack\]/ig, '<att>');
	vXml = vXml.replace(/\[defense\]/ig, '<def>');
	vXml = vXml.replace(/\[willpower\]/ig, '<wil>');
	vXml = vXml.replace(/\[leadership\]/ig, '<lea>');
	vXml = vXml.replace(/\[lore\]/ig, '<lor>');
	vXml = vXml.replace(/\[spirit\]/ig, '<spi>');
	vXml = vXml.replace(/\[tactics\]/ig, '<tac>');
	vXml = vXml.replace(/\[baggins\]/ig, '<bag>');
	vXml = vXml.replace(/\[fellowship\]/ig, '<fel>');
	vXml = vXml.replace(/\[sailing\]/ig, '<sai>');
	vXml = vXml.replace(/\[space\]/ig, '<hs>');
	vXml = vXml.replace(/\[pp\]/ig, '<pp>');
	vXml = vXml.replace(/\[h1\]/ig, '[center][lotr]<size 11>');
	vXml = vXml.replace(/\[\/h1\]/ig, '</size>[/lotr][/center]');
	vXml = vXml.replace(/\[h2\]/ig, '[center][lotr]<size 9>');
	vXml = vXml.replace(/\[\/h2\]/ig, '</size>[/lotr][/center]');
	vXml = vXml.replace(/\[center\]/ig, '<center>');
	vXml = vXml.replace(/([^\n])\<center\>/ig, '$1\n<center>');
	vXml = vXml.replace(/\[\/center\]\n?/ig, '\n<left>');
	vXml = vXml.replace(/\[right\]/ig, '<right>');
	vXml = vXml.replace(/([^\n])\<right\>/ig, '$1\n<right>');
	vXml = vXml.replace(/\[\/right\]\n?/ig, '\n<left>');
	vXml = vXml.replace(/\<left\>(\n*)\<center\>/ig, '$1<center>');
	vXml = vXml.replace(/\<left\>(\n*)\<right\>/ig, '$1<right>');
	vXml = vXml.replace(/\n*\<left\>$/ig, '');
	vXml = vXml.replace(/\[bi\]/ig, '<b><i>');
	vXml = vXml.replace(/\[\/bi\]/ig, '</i></b>');
	vXml = vXml.replace(/\[b\]/ig, '<b>');
	vXml = vXml.replace(/\[\/b\]/ig, '</b>');
	vXml = vXml.replace(/\[i\]/ig, '<i>');
	vXml = vXml.replace(/\[\/i\]/ig, '</i>');
	vXml = vXml.replace(/\[u\]/ig, '<u>');
	vXml = vXml.replace(/\[\/u\]/ig, '</u>');
	vXml = vXml.replace(/\[strike\]/ig, '<del>');
	vXml = vXml.replace(/\[\/strike\]/ig, '</del>');
	vXml = vXml.replace(/\[lotr\]/ig, '<family LRLfont>');
	vXml = vXml.replace(/\[\/lotr\]/ig, '</family>');
	vXml = vXml.replace(/\[red\]/ig, '<red>');
	vXml = vXml.replace(/\[\/red\]/ig, '</red>');
	vXml = vXml.replace(/\[tab\]/ig, '\t');
	vXml = vXml.replace(/\[size ([0-9]+)\]/ig, '<size $1>');
	vXml = vXml.replace(/\[\/size\]/ig, '</size>');
	vXml = vXml.replace(/\[img ("?)([^\]]+)\]/ig, '<image $1project:$2>');
	vXml = vXml.replace(/\<image ("?)project:icons\//ig, '<image $1project:imagesIcons/');
	vXml = vXml.replace(/\<image ("?)project:custom\//ig, '<image $1project:imagesCustom/' + setID + '_');

	if (['Name', 'BName', 'Victory Points', 'BVictory Points', 'Artist', 'BArtist', 'Adventure'].indexOf(nXml + '') == -1) {
		vXml = vXml.replace(/([^:;,.?!]) (<thr>|<att>|<def>|<wil>|<lea>|<lor>|<spi>|<tac>|<uni>)/g, '$1\u00a0$2');
		vXml = vXml.replace(/([0-9]+) /g, '$1\u00a0');
		vXml = vXml.replace(/ ([0-9]+)([:;,.?!])/g, '\u00a0$1$2');
		vXml = vXml.replace(/(^|[ \n"\(])([\-'A-Za-z\u00c0-\u00ff]{1,5})([:;,.?!"\)]*) (["\(]*)([\-'A-Za-z\u00c0-\u00ff]{1,5})([:;,.?!"\)]+)(\n|$)/g, '$1$2$3\u00a0$4$5$6$7');

		// fix no-break space inside tags
		vXml = vXml.replace(/\u00a0([^<]+)>/g, ' $1>');
		vXml = vXml.replace(/\u00a0([^<]+)>/g, ' $1>');
		vXml = vXml.replace(/\u00a0([^<]+)>/g, ' $1>');
	}

	vXml = vXml.replace(/\n+$/g, '');
	vXml = vXml.replace(/\n\n/g, '\n<vs>\n');

	return vXml;
}

function getProjectMember(path) {
	var member = project.findChild(path);
	if (member == null) {
		throw new Error('Missing required project file: ' + path);
	}
	return member;
}