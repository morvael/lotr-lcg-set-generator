useLibrary('imageutils');
useLibrary('threads');
importPackage(arkham.project);
importClass(java.io.File);
importClass(javax.xml.parsers.DocumentBuilder);
importClass(javax.xml.parsers.DocumentBuilderFactory);
importClass(org.w3c.dom.Document);
importClass(org.w3c.dom.Element);
importClass(org.w3c.dom.Node);
importClass(org.w3c.dom.NodeList);

var doubleSideTypes = ['Campaign', 'Contract', 'Nightmare', 'Presentation', 'Quest', 'Rules'];
var landscapeTypes = ['Encounter Side Quest', 'Player Side Quest', 'Quest'];
var playerTypes = ['Ally', 'Attachment', 'Event', 'Hero', 'Player Side Quest', 'Treasure'];
var playerCopyTypes = ['Ally', 'Attachment', 'Event', 'Player Side Quest'];
var nonUniqueTypes = ['Campaign', 'Contract', 'Encounter Side Quest', 'Event', 'Nightmare', 'Player Side Quest', 'Presentation', 'Quest', 'Rules', 'Treachery'];

var portraitRegion = {};
portraitRegion['Ally'] = '87,0,326,330';
portraitRegion['Attachment'] = '40,50,333,280';
portraitRegion['Contract'] = '0,0,413,315';
portraitRegion['Encounter Side Quest'] = '0,0,563,413';
portraitRegion['Enemy'] = '87,0,326,330';
portraitRegion['Event'] = '60,0,353,330';
portraitRegion['Hero'] = '87,0,326,330';
portraitRegion['Location'] = '0,60,413,268';
portraitRegion['Objective'] = '0,60,413,300';
portraitRegion['Objective Ally'] = '78,72,335,268';
portraitRegion['Player Side Quest'] = '0,0,563,413';
portraitRegion['Quest'] = '0,0,563,413';
portraitRegion['Ship Enemy'] = '87,0,326,330';
portraitRegion['Ship Objective'] = '78,72,335,268';
portraitRegion['Treachery'] = '60,0,353,330';

var bodyRegion = {};
bodyRegion['Ally'] = '57,378,299,114';
bodyRegion['Attachment'] = '57,347,299,144';
bodyRegion['Enemy'] = '57,377,299,114';
bodyRegion['Event'] = '65,351,283,140';
bodyRegion['Hero'] = '57,377,299,114';
bodyRegion['Location'] = '56,346,301,142';
bodyRegion['Objective'] = '65,346,283,146';
bodyRegion['Objective Ally'] = '65,346,283,146';
bodyRegion['Ship Enemy'] = '57,377,299,114';
bodyRegion['Ship Objective'] = '65,346,283,146';
bodyRegion['Treachery'] = '65,356,283,135';
bodyRegion['Treasure'] = '57,347,299,144';  // T.B.D.

bodyRegion['Encounter Side Quest'] = '51,249,461,114';
bodyRegion['Player Side Quest'] = '51,251,461,114';
bodyRegion['Quest'] = '51,249,461,114';

var traitRegion = {};
traitRegion['Ally'] = '57,358,299,20';
traitRegion['Attachment'] = '85,327,243,20';
traitRegion['Enemy'] = '57,357,299,20';
traitRegion['Event'] = '78,331,257,20';
traitRegion['Hero'] = '57,357,299,20';
traitRegion['Location'] = '56,326,301,20';
traitRegion['Objective'] = '65,326,283,20';
traitRegion['Objective Ally'] = '65,326,283,20';
traitRegion['Ship Enemy'] = '57,357,299,20';
traitRegion['Ship Objective'] = '65,326,283,20';
traitRegion['Treachery'] = '65,336,283,20';
traitRegion['Treasure'] = '85,327,243,20';  // T.B.D.

var nameRegion = {};
nameRegion['Ally'] = '100,329,213,20';
nameRegion['Attachment'] = '132,38,183,24';
nameRegion['Contract'] = '84,245,245,28';
nameRegion['Encounter Side Quest'] = '100,42,363,29';
nameRegion['Enemy'] = '94,328,225,20';
nameRegion['Event'] = '56,86,25,178';
nameRegion['Hero'] = '100,328,213,20';
nameRegion['Location'] = '108,42,197,20';
nameRegion['Objective'] = '75,39,263,25';
nameRegion['Objective Ally'] = '75,39,263,25';
nameRegion['Player Side Quest'] = '144,44,368,29';
nameRegion['Quest'] = '144,44,368,29';
nameRegion['Ship Enemy'] = '94,328,225,20';
nameRegion['Ship Objective'] = '75,39,263,25';
nameRegion['Treachery'] = '55,108,26,164';

var nameRegionUnique = {};
nameRegionUnique['Ally'] = '100,327,213,20';
nameRegionUnique['Attachment'] = '132,36,183,24';
nameRegionUnique['Contract'] = '84,242,245,28';
nameRegionUnique['Encounter Side Quest'] = '100,42,363,29';
nameRegionUnique['Enemy'] = '94,326,225,20';
nameRegionUnique['Event'] = '54,86,25,178';
nameRegionUnique['Hero'] = '100,326,213,20';
nameRegionUnique['Location'] = '108,40,197,20';
nameRegionUnique['Objective'] = '75,36,263,25';
nameRegionUnique['Objective Ally'] = '75,36,263,25';
nameRegionUnique['Player Side Quest'] = '144,44,368,29';
nameRegionUnique['Quest'] = '144,44,368,29';
nameRegionUnique['Ship Enemy'] = '94,326,225,20';
nameRegionUnique['Ship Objective'] = '75,36,263,25';
nameRegionUnique['Treachery'] = '53,108,26,164';

var namePointSize = {};
namePointSize['Ally'] = 6.5;
namePointSize['Attachment'] = 6.5;
namePointSize['Contract'] = 7.5;
namePointSize['Encounter Side Quest'] = 7.5;
namePointSize['Enemy'] = 6.5;
namePointSize['Event'] = 6.5;
namePointSize['Hero'] = 6.5;
namePointSize['Location'] = 6.5;
namePointSize['Objective'] = 7.5;
namePointSize['Objective Ally'] = 7.5;
namePointSize['Player Side Quest'] = 7.5;
namePointSize['Quest'] = 7.5;
namePointSize['Ship Enemy'] = 6.5;
namePointSize['Ship Objective'] = 7.5;
namePointSize['Treachery'] = 6.5;

var hitPointsRegion = {};
hitPointsRegion['Ally'] = '66,269,58,40';
hitPointsRegion['Enemy'] = '64,269,58,40';
hitPointsRegion['Hero'] = '64,269,58,40';
hitPointsRegion['Objective Ally'] = '61,263,58,40';
hitPointsRegion['Ship Enemy'] = '64,269,58,40';
hitPointsRegion['Ship Objective'] = '61,263,58,40';

var attackRegion = {};
attackRegion['Ally'] = '75,157,16,16';
attackRegion['Enemy'] = '73,156,16,16';
attackRegion['Hero'] = '73,157,16,16';
attackRegion['Objective Ally'] = '70,150,16,16';
attackRegion['Ship Enemy'] = '73,156,16,16';
attackRegion['Ship Objective'] = '70,150,16,16';

var defenseRegion = {};
defenseRegion['Ally'] = '75,200,16,16';
defenseRegion['Enemy'] = '73,199,16,16';
defenseRegion['Hero'] = '73,200,16,16';
defenseRegion['Objective Ally'] = '70,194,16,16';
defenseRegion['Ship Enemy'] = '73,199,16,16';
defenseRegion['Ship Objective'] = '70,194,16,16';

var willpowerRegion = {};
willpowerRegion['Ally'] = '75,117,16,16';
willpowerRegion['Hero'] = '73,117,16,16';
willpowerRegion['Objective Ally'] = '70,104,16,16';
willpowerRegion['Ship Objective'] = '70,104,16,16';

var threatRegion = {};
threatRegion['Enemy'] = '73,115,16,16';
threatRegion['Location'] = '59,92,16,16';
threatRegion['Ship Enemy'] = '73,115,16,16';

var progressRegion = {};
progressRegion['Encounter Side Quest'] = '52,202,35,24';
progressRegion['Location'] = '56,283,35,24';
progressRegion['Quest'] = '55,202,35,24';
progressRegion['Player Side Quest'] = '55,202,35,24';

var adventureRegion = {};
adventureRegion['Objective'] = '67,74,276,15';
adventureRegion['Objective Ally'] = '67,74,276,15';
adventureRegion['Quest'] = '190,78,275,15';
adventureRegion['Ship Objective'] = '67,74,276,15';

var resourceCostRegion = {};
resourceCostRegion['Ally'] = '66,41,56,40';
resourceCostRegion['Attachment'] = '38,43,55,39';
resourceCostRegion['Event'] = '37,38,55,39';
resourceCostRegion['Player Side Quest'] = '43,44,57,39';

var encounterPortraitRegion = {};
encounterPortraitRegion['Enemy'] = '321,266,43,43';
encounterPortraitRegion['Encounter Side Quest'] = '478,187,43,43';
encounterPortraitRegion['Location'] = '319,266,43,43';
encounterPortraitRegion['Objective'] = '315,260,43,43';
encounterPortraitRegion['Objective Ally'] = '315,260,43,43';
encounterPortraitRegion['Quest'] = '474,185,43,43';
encounterPortraitRegion['Ship Enemy'] = '321,266,43,43';
encounterPortraitRegion['Ship Objective'] = '315,260,43,43';
encounterPortraitRegion['Treachery'] = '320,269,43,43';

var encounterNumberRegion = {};
encounterNumberRegion['Enemy'] = '329,313,26,10';
encounterNumberRegion['Encounter Side Quest'] = '486,229,26,10';
encounterNumberRegion['Location'] = '328,314,26,10';
encounterNumberRegion['Objective'] = '323,307,26,10';
encounterNumberRegion['Objective Ally'] = '323,307,26,10';
encounterNumberRegion['Ship Enemy'] = '329,313,26,10';
encounterNumberRegion['Ship Objective'] = '323,307,26,10';
encounterNumberRegion['Treachery'] = '329,317,26,10';

var optionBodyShape = {};
optionBodyShape['Encounter Side Quest'] = '0,0,348,0,64';
optionBodyShape['Player Side Quest'] = '0,0,348,0,62';
optionBodyShape['Quest'] = '0,0,350,0,64';

var optionRightDecorationRegion = {};
optionRightDecorationRegion['Ally'] = '298,503,72,18';
optionRightDecorationRegion['Attachment'] = '300,503,72,18';
optionRightDecorationRegion['Encounter Side Quest'] = '452,347,72,18';
optionRightDecorationRegion['Enemy'] = '301,503,72,18';
optionRightDecorationRegion['Event'] = '298,503,72,18';
optionRightDecorationRegion['Hero'] = '298,502,72,18';
optionRightDecorationRegion['Location'] = '301,503,72,18';
optionRightDecorationRegion['Objective'] = '290,502,72,18';
optionRightDecorationRegion['Objective Ally'] = '290,502,72,18';
optionRightDecorationRegion['Player Side Quest'] = '451,349,72,18';
optionRightDecorationRegion['Quest'] = '450,350,72,18';
optionRightDecorationRegion['Ship Enemy'] = '301,503,72,18';
optionRightDecorationRegion['Ship Objective'] = '290,502,72,18';
optionRightDecorationRegion['Treachery'] = '301,503,72,18';

var optionRightRegion = {};
optionRightRegion['Ally'] = '305,504,59,20';
optionRightRegion['Attachment'] = '307,504,59,20';
optionRightRegion['Encounter Side Quest'] = '459,348,59,20';
optionRightRegion['Enemy'] = '308,504,59,20';
optionRightRegion['Event'] = '305,504,59,20';
optionRightRegion['Hero'] = '305,503,59,20';
optionRightRegion['Location'] = '308,504,59,20';
optionRightRegion['Objective'] = '297,503,59,20';
optionRightRegion['Objective Ally'] = '297,503,59,20';
optionRightRegion['Player Side Quest'] = '458,350,59,20';
optionRightRegion['Quest'] = '457,351,59,20';
optionRightRegion['Ship Enemy'] = '308,504,59,20';
optionRightRegion['Ship Objective'] = '297,503,59,20';
optionRightRegion['Treachery'] = '308,504,59,20';

var translate = {};
translate['Ally'] = {'English': 'Ally', 'French': 'Alli\u00e9', 'German': 'Verb\u00fcndeter', 'Spanish': 'Aliado', 'Polish': 'Sprzymierzeniec', 'Italian': 'Alleato'};
translate['Attachment'] = {'English': 'Attachment', 'French': 'Attachement', 'German': 'Verst\u00e4rkung', 'Spanish': 'Vinculada', 'Polish': 'Dodatek',
	'Italian': 'Aggregato'};
translate['Boon'] = {'English': 'Boon', 'French': 'Avantage', 'German': 'Gunst', 'Spanish': 'Ayuda', 'Polish': '\u0141aska', 'Italian': 'Vantaggio'};
translate['Burden'] = {'English': 'Burden', 'French': 'Fardeau', 'German': 'B\u00fcrde', 'Spanish': 'Carga', 'Polish': 'Brzemi\u0119', 'Italian': 'Svantaggio'};
translate['Campaign'] = {'English': 'Campaign', 'French': 'Campagne', 'German': 'Kampagne', 'Spanish': 'Campa\u00f1a', 'Polish': 'Kampania', 'Italian': 'Campagna'};
translate['Contract'] = {'English': 'Contract', 'French': 'Contrat', 'German': 'Abkommen', 'Spanish': 'Contrato', 'Polish': 'Kontrakt', 'Italian': 'Contratto'};
translate['Encounter Side Quest'] = {'English': 'Side Quest', 'French': 'Qu\u00eate Annexe', 'German': 'Nebenabenteuer', 'Spanish': 'Misi\u00f3n Secundaria',
	'Polish': 'Poboczna wyprawa', 'Italian': 'Ricerca Secondaria'};
translate['Enemy'] = {'English': 'Enemy', 'French': 'Ennemi', 'German': 'Gegner', 'Spanish': 'Enemigo', 'Polish': 'Wr\u00f3g', 'Italian': 'Nemico'};
translate['Event'] = {'English': 'Event', 'French': '\u00c9v\u00e9nement', 'German': 'Ereignis', 'Spanish': 'Evento', 'Polish': 'Wydarzenie', 'Italian': 'Evento'};
translate['Hero'] = {'English': 'Hero', 'French': 'H\u00e9ros', 'German': 'Held', 'Spanish': 'H\u00e9roe', 'Polish': 'Bohater', 'Italian': 'Eroe'};
translate['Location'] = {'English': 'Location', 'French': 'Lieu', 'German': 'Ort', 'Spanish': 'Lugar', 'Polish': 'Obszar', 'Italian': 'Luogo'};
translate['Nightmare'] = {'English': 'Setup', 'French': 'Pr\u00e9paration', 'German': 'Vorbereitung', 'Spanish': 'Preparaci\u00f3n', 'Polish': 'Przygotowanie', 'Italian': 'Preparazione'};
translate['Objective'] = {'English': 'Objective', 'French': 'Objectif', 'German': 'Ziel', 'Spanish': 'Objetivo', 'Polish': 'Cel', 'Italian': 'Obiettivo'};
translate['Objective Ally'] = {'English': 'Objective-Ally', 'French': 'Objectif-Alli\u00e9', 'German': 'Ziel-Verb\u00fcndeter', 'Spanish': 'Objetivo-Aliado',
	'Polish': 'Cel-Sprzymierzeniec', 'Italian': 'Obiettivo-Alleato'};
translate['Objective Hero'] = {'English': 'Objective-Hero', 'French': 'Objectif-H\u00e9ros', 'German': 'Ziel-Held', 'Spanish': 'H\u00e9roe-Objetivo', 'Polish': 'Cel-Bohater', 'Italian': 'Eroe-Obiettivo'};
translate['Objective Location'] = {'English': 'Objective-Location', 'French': 'Objectif-Lieu', 'German': 'Ziel-Ort', 'Spanish': 'Lugar-Objetivo', 'Polish': 'Cel-Obszar', 'Italian': 'Luogo-Obiettivo'};
translate['Player Side Quest'] = {'English': 'Side Quest', 'French': 'Qu\u00eate Annexe', 'German': 'Nebenabenteuer', 'Spanish': 'Misi\u00f3n Secundaria',
	'Polish': 'Poboczna wyprawa', 'Italian': 'Ricerca Secondaria'};
translate['Quest'] = {'English': 'Quest', 'French': 'Qu\u00eate', 'German': 'Abenteuer', 'Spanish': 'Misi\u00f3n', 'Polish': 'Wyprawa', 'Italian': 'Ricerca'};
translate['Setup'] = {'English': 'Setup', 'French': 'Pr\u00e9paration', 'German': 'Vorbereitung', 'Spanish': 'Preparaci\u00f3n', 'Polish': 'Przygotowanie', 'Italian': 'Preparazione'};
translate['Ship Enemy'] = {'English': 'Ship-Enemy', 'French': 'Navire-Ennemi', 'German': 'Schiff-Gegner', 'Spanish': 'Barco-Enemigo', 'Polish': 'Statek-Wr\u00f3g', 'Italian': 'Nave-Nemico'};
translate['Ship Objective'] = {'English': 'Ship-Objective', 'French': 'Navire-Objectif', 'German': 'Schiff-Ziel', 'Spanish': 'Barco-Objetivo', 'Polish': 'Statek-Cel', 'Italian': 'Nave-Obiettivo'};
translate['Treachery'] = {'English': 'Treachery', 'French': 'Tra\u00eetrise', 'German': 'Verrat', 'Spanish': 'Traici\u00f3n', 'Polish': 'Podst\u0119p', 'Italian': 'Perfidia'};
translate['Treasure'] = {'English': 'Treasure', 'French': 'Tr\u00e9sor', 'German': 'Schatz', 'Spanish': 'Tesoro', 'Polish': 'Skarb', 'Italian': 'Tesoro'};
translate['Encounter Keyword'] = {'English': 'Encounter', 'French': 'Rencontre', 'German': 'Begegnung', 'Spanish': 'Encuentro', 'Polish': 'Spotkanie',
	'Italian': 'Incontro'};
translate['Illustrator'] = {'English': 'Illus.', 'French': 'Illus.', 'German': 'Illus.', 'Spanish': 'Ilus.', 'Polish': 'Illus.', 'Italian': 'Illus.'};
translate['Unknown Artist'] = {'English': 'Unknown Artist', 'French': 'Artiste inconnu', 'German': 'Unbekannter K\u00fcnstler', 'Spanish': 'Artista desconocido',
	'Polish': 'Artysta nieznany', 'Italian': 'Artista sconosciuto'};
translate['Victory'] = {'English': 'Victory', 'French': 'Victoire', 'German': 'Sieg', 'Spanish': 'Victoria', 'Polish': 'Zwyci\u0119stwo', 'Italian': 'Vittoria'};
translate['Page'] = {'English': 'Page', 'French': 'Page', 'German': 'Seite', 'Spanish': 'P\u00e1gina', 'Polish': 'Strona', 'Italian': 'Pagina'};
translate['Side'] = {'English': 'Side', 'French': 'Face', 'German': 'Seite', 'Spanish': 'Lado', 'Polish': 'Strona', 'Italian': 'Lato'};

Thread.busyWindow(main, 'Updating cards...', true);

function main(progress, target) {
	var icons = [];
	var iconFiles = project.findChild('imagesIcons').iterator();
	while (iconFiles.hasNext()) {
		let icon = (iconFiles.next() + '').replace(/\.png$/g, '');
		icons.push(icon);
	}

	var xmlFiles = project.findChild('XML').iterator();
	while (xmlFiles.hasNext()) {
		run(progress, target, xmlFiles.next() + '', icons);
	}
	return;
}

function run(progress, target, filename, icons) {
	var fXmlFile = new File(getProjectMember('XML/').file, filename + '.xml');
	Console.err.println('\nReading ' + fXmlFile);

	var setID = filename.split('.')[0];
	var lang = filename.split('.')[1];

	var dbFactory = DocumentBuilderFactory.newInstance();
	var dBuilder = dbFactory.newDocumentBuilder();
	var doc = dBuilder.parse(fXmlFile);
	var docElement = doc.getDocumentElement();
	docElement.normalize();

	var setName = docElement.getAttribute('name');
	var setIcon = docElement.getAttribute('icon');
	var copyrightText = docElement.getAttribute('copyright');

	var png300Bleed = false;
	var png800Bleed = false;
	if (doc.getDocumentElement().getAttribute('png300Bleed') + '' == '1') {
		png300Bleed = true;
	}
	if (doc.getDocumentElement().getAttribute('png800Bleed') + '' == '1') {
		png800Bleed = true;
	}

	var nList = doc.getElementsByTagName('card');
	for (let i = 0; i < nList.getLength(); i++) {
		let nNode = nList.item(i);
		if (nNode.getAttribute('skip') == '1') {
			continue;
		}

		let card = {};
		card['Set'] = setName;
		card['octgn'] = nNode.getAttribute('id');
		card['Name'] = nNode.getAttribute('name');
		let propList = nNode.getElementsByTagName('property');
		for (let j = 0; j < propList.getLength(); j++) {
			let nProp = propList.item(j);
			if (!nProp.getParentNode().isSameNode(nNode)) {
				continue;
			}
			if (nProp && nProp.getNodeType() == Node.ELEMENT_NODE) {
				card[nProp.getAttribute('name')] = nProp.getAttribute('value');
			}
		}
		let altList = nNode.getElementsByTagName('alternate');
		for (let k = 0; k < altList.getLength(); k++) {
			let nAlternate = altList.item(k);
			if (nAlternate && nAlternate.getNodeType() == Node.ELEMENT_NODE) {
				card['BName'] = nAlternate.getAttribute('name');
				let altPropList = nAlternate.getElementsByTagName('property');
				for (let l = 0; l < altPropList.getLength(); l++) {
					let nAltProp = altPropList.item(l);
					if (nAltProp && nAltProp.getNodeType() == Node.ELEMENT_NODE) {
						card['B' + nAltProp.getAttribute('name')] = nAltProp.getAttribute('value');
					}
				}
			}
		}

		// Console.err.println('\nProcessing ' + card['Name']);
		if (card['Type'] == 'Quest' && card['BQuest Points']) {
			card['Quest Points'] = card['BQuest Points'];
		}

		if (!card['Text']) {
			card['Text'] = ' ';
		}

		if (!card['Artist']) {
			card['Artist'] = 'Unknown Artist';
		}
		if (card['BName'] && !card['BArtist']) {
			card['BArtist'] = card['Artist'];
		}
		if (card['BName'] && card['Artwork'] && !card['BArtwork']) {
			card['BArtwork'] = card['Artwork'];
			if (card['PanX']) {
				card['BPanX'] = card['PanX'];
			}
			if (card['PanY']) {
				card['BPanY'] = card['PanY'];
			}
			if (card['Scale']) {
				card['BScale'] = card['Scale'];
			}
		}

		let playerCopies = false;
		if (playerCopyTypes.indexOf(card['Type'] + '') > -1 && card['Quantity'] == 3) {
			playerCopies = true;
			card['Quantity'] = 1;
		}

		for (let j = 0; j < card['Quantity']; j++) {
			let sides = ['front'];
			if ((doubleSideTypes.indexOf(card['Type'] + '') == -1) && card['BName']) {
				sides.push('back');
			}
			for (let idx = 0; idx < sides.length; idx++) {
				let side = sides[idx];
				let cardName, cardType, cardSphere, keywords, suffix, mapping;
				if (side == 'front') {
					cardName = card['Name'];
					cardType = card['Type'] + '';
					cardSphere = card['Sphere'] + '';

					if ((cardSphere == 'Boon') && (['Ally', 'Hero', 'Objective Hero', 'Objective Location', 'Player Side Quest', 'Ship Objective'].indexOf(cardType) > -1)) {
						Console.err.println('\nERROR: ' + cardType + " doesn't support Boon subtype yet.");
						card['Sphere'] = 'Neutral';
					}
					else if ((cardSphere == 'Burden') && (['Encounter Side Quest', 'Enemy', 'Location', 'Ship Enemy'].indexOf(cardType) > -1)) {
						Console.err.println('\nERROR: ' + cardType + " doesn't support Burden subtype yet.");
						card['Sphere'] = '';
					}
					else if ((cardSphere == 'Nightmare') && (['Encounter Side Quest', 'Objective', 'Ship Enemy', 'Presentation'].indexOf(cardType) > -1)) {
						Console.err.println('\nERROR: ' + cardType + " doesn't support Nightmare template yet.");
						card['Sphere'] = '';
					}
					else if (cardSphere == 'Upgraded') {
						Console.err.println('\nERROR: ' + cardSphere + " template is not supported yet.");
						card['Sphere'] = '';
					}

					keywords = card['Keywords'];
					suffix = '';
					mapping = [
						// Convert from member name in xml file to member name in eon file
						// [eon, xml]
						['Name', 'Name'],
						['Unique', 'Unique'],
						['Template', 'Sphere'],
						['Trait', 'Traits'],
						['ResourceCost', 'Cost'],
						['ThreatCost', 'Cost'],
						['Stage', 'Cost'],
						['Engagement', 'Engagement Cost'],
						['Threat', 'Threat'],
						['Willpower', 'Willpower'],
						['Attack', 'Attack'],
						['Defense', 'Defense'],
						['HitPoints', 'Health'],
						['Progress', 'Quest Points'],
						['OptionRight', 'Victory Points'],
						['OptionSpecial', 'Special Icon'],
						['Rules', 'Text'],
						['Description', 'Text'],
						['Shadow', 'Shadow'],
						['Flavour', 'Flavour'],
						['Story', 'Flavour'],
						['Artist', 'Artist'],
						['Adventure', 'Adventure'],
						['Cycle', 'Adventure'],
						['CollectionNumberCustom', 'Card Number'],
						['CollectionInfo', 'Version']
					];
					if (doubleSideTypes.indexOf(cardType) > -1) {
						mapping = mapping.concat([
							['NameBack', 'BName'],
							['RulesBack', 'BText'],
							['FlavourBack', 'BFlavour'],
							['StoryBack', 'BFlavour'],
							['OptionRightBack', 'BVictory Points'],
							['ArtistBack', 'BArtist']
						]);
					}
				}
				else {
					cardName = card['BName'];
					cardType = card['BType'] + '';
					cardSphere = card['BSphere'] + '';

					if ((cardSphere == 'Boon') && (['Ally', 'Hero', 'Objective Hero', 'Player Side Quest', 'Ship Objective'].indexOf(cardType) > -1)) {
						Console.err.println('\nERROR: ' + cardType + " doesn't support Boon subtype yet.");
						card['BSphere'] = 'Neutral';
					}
					else if ((cardSphere == 'Burden') && (['Encounter Side Quest', 'Enemy', 'Location', 'Ship Enemy'].indexOf(cardType) > -1)) {
						Console.err.println('\nERROR: ' + cardType + " doesn't support Burden subtype yet.");
						card['BSphere'] = '';
					}
					else if ((cardSphere == 'Nightmare') && (['Encounter Side Quest', 'Objective', 'Ship Enemy', 'Presentation'].indexOf(cardType) > -1)) {
						Console.err.println('\nERROR: ' + cardType + " doesn't support Nightmare template yet.");
						card['BSphere'] = '';
					}
					else if (cardSphere == 'Upgraded') {
						Console.err.println('\nERROR: ' + cardSphere + " template is not supported yet.");
						card['Sphere'] = '';
					}

					keywords = card['BKeywords'];
					suffix = '-2';
					mapping = [
						// Convert from member name in xml file to member name in eon file
						// [eon, xml]
						['Name', 'BName'],
						['Unique', 'BUnique'],
						['Template', 'BSphere'],
						['Trait', 'BTraits'],
						['ResourceCost', 'BCost'],
						['ThreatCost', 'BCost'],
						['Stage', 'BCost'],
						['Engagement', 'BEngagement Cost'],
						['Threat', 'BThreat'],
						['Willpower', 'BWillpower'],
						['Attack', 'BAttack'],
						['Defense', 'BDefense'],
						['HitPoints', 'BHealth'],
						['Progress', 'BQuest Points'],
						['OptionRight', 'BVictory Points'],
						['OptionSpecial', 'BSpecial Icon'],
						['Rules', 'BText'],
						['Description', 'BText'],
						['Shadow', 'BShadow'],
						['Flavour', 'BFlavour'],
						['Story', 'BFlavour'],
						['Artist', 'BArtist'],
						['Adventure', 'Adventure'],
						['Cycle', 'Adventure'],
						['CollectionNumberCustom', 'Card Number'],
						['CollectionInfo', 'Version']
					];
				}

				if (['Objective Hero', 'Objective Location'].indexOf(cardType) > -1) {
					Console.err.println('\nERROR: ' + cardType + " type is not supported yet.");
					continue;
				}

				progress.status = cardName;
				let newCard = ResourceKit.getGameComponentFromFile(getProjectMember('Templates/' + cardType + '.eon').file, false);
				let s = newCard.settings;

				for (let k = 0; k < mapping.length; k++) {
					let nEon = mapping[k][0];
					let nXml = mapping[k][1];
					let vXml = card[nXml];

					if (!vXml) {
						if (['Sphere', 'BSphere', 'Special Icon', 'BSpecial Icon'].indexOf(nXml + '') == -1) {
							s.set(nEon, '');
						}
						continue;
					}

					if (vXml == '-') {
						vXml = 'minus';
					}
					else if (vXml == 'empty') {
						vXml = 'empty1x1';
					}

					if (['Victory Points', 'BVictory Points'].indexOf(nXml + '') > -1) {
						if ((cardType != 'Presentation') && (cardType != 'Rules') && vXml.match(/^[0-9]+$/)) {
							vXml = translate['Victory'][lang].toUpperCase() + ' ' + vXml;
						}
					}
					else if (['Special Icon', 'BSpecial Icon'].indexOf(nXml + '') > -1) {
						vXml = convertIconName(vXml);
					}
					else if (['Artist', 'BArtist'].indexOf(nXml + '') > -1) {
						if (vXml == 'Unknown Artist') {
							vXml = translate['Unknown Artist'][lang];
						}
					}
					else if (['Text', 'BText'].indexOf(nXml + '') > -1) {
						if (keywords) {
							vXml = keywords + '\n\n' + vXml;
						}
					}
					else if (nXml == 'Card Number') {
						if ((sides.length > 1) && (side == 'front')) {
							vXml = vXml + 'a';
						}
						else if ((sides.length > 1) && (side == 'back')) {
							vXml = vXml + 'b';
						}
					}
					else if ((nXml == 'Adventure') && (cardType != 'Campaign')) {
						vXml = vXml.toUpperCase();
					}

					vXml = markUp(vXml, nXml, lang, setID, cardType);
					s.set(nEon, vXml);
				}

				s.set('Name-style', 'FAMILY: {"Vafthrudnir"}');
				s.set('Type-style', 'FAMILY: {"Vafthrudnir"}');
				s.set('Adventure-style', 'FAMILY: {"Vafthrudnir"}');
				s.set('Option-style', 'WIDTH: SEMICONDENSED; FAMILY: {"Vafthrudnir"}');
				s.set('EncounterSetNumber-style', 'WEIGHT: BOLD; FAMILY: {"Times New Roman"}');
				s.set('Bottom-style', 'WEIGHT: BOLD; WIDTH: SEMICONDENSED; FAMILY: {"Times New Roman"}');
				s.set('Type-pointsize', 7.25);
				s.set('Adventure-pointsize', 5.25);
				s.set('Option-pointsize', 5.25);
				s.set('EncounterSetNumber-pointsize', 4);
				s.set('Trait-format', '<center><width regular><tracking -0.005><family "Times New Roman"><size 8.25><i><b>');
				s.set('Flavour-format', '<left></size><size 6.25><i>');
				s.set('FlavourBack-format', '<left></size><size 6.25><i>');
				s.set('Shadow-format', '<image res://TheLordOfTheRingsLCG/image/empty1x1.png 0.1 0.005>' +
					'<br><center><image res://TheLordOfTheRingsLCG/image/ShadowSeparator.png 1.625in>' +
					'<br><left><image res://TheLordOfTheRingsLCG/image/empty1x1.png 0.1 0.005></size><size 7.5><i><br>');
				s.set('Engagement-region', '76,48,36,25');
				s.set('ThreatCost-region', '75,50,36,25');
				s.set('Type-region', '136,504,141,20');
				s.set('Engagement-tint', '28.0,1.0,0.9');
				s.set('Progress-tint', '28.0,1.0,0.9');
				s.set('Sphere-Body-shape', '0,0,472,40,0');
				s.set('LRL-IllustratorShort', translate['Illustrator'][lang]);
				s.set('LRL-IllustratorUnknown', translate['Illustrator'][lang] + ' ' + translate['Unknown Artist'][lang]);
				if (landscapeTypes.indexOf(cardType) > -1) {
					s.set('Artist-region', '130,375,100,15');
					s.set('Copyright-region', '225,375,124,15');
					s.set('Collection-portrait-clip-region', '391,376,12,12');
					s.set('CollectionNumber-region', '403,375,18,15');
					s.set('CollectionInfo-region', '419,375,20,15');
				}
				else {
					s.set('Artist-region', '63,527,100,15');
					s.set('Copyright-region', '158,527,124,15');
					s.set('Collection-portrait-clip-region', '322,528,12,12');
					s.set('CollectionNumber-region', '334,527,18,15');
					s.set('CollectionInfo-region', '350,527,20,15');
				}

				if (cardType == 'Presentation') {
					if (s.get('OptionRight').search('/') > -1) {
						s.set('LRL-Page', translate['Page'][lang]);
						s.set('LRL-PageOf', '<bs></size><size 3> </size><size 7>/</size><size 3> </size><size 7><bs>');
						s.set('PageNumber', s.get('OptionRight').split('/')[0]);
						s.set('PageTotal', s.get('OptionRight').split('/')[1]);
					}
					else {
						s.set('PageNumber', 0);
						s.set('PageTotal', 0);
					}

					s.set('Story', '');
					s.set('Flavour', '');
					s.set('Name', '');
					s.set('GameName', '');

					s.set('Body-style', 'FOREGROUND: #000000; WIDTH: REGULAR; TRACKING: -0.005; FAMILY: {Eons.namedObjects.LRL.BodyFont}; SIZE: 7.5');
					s.set('Body-pointsize', 7.5);
					s.set('Description-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('Rules-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('RulesBack-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('VerticalSpacer-tag-replacement', '<image res://TheLordOfTheRingsLCG/image/empty1x1.png 0.1 0.1>');
					s.set('Body-lineTightness', 0.8);
					s.set('Body-region', '48,73,317,418');
					s.set('BackgroundBack-external-path', 'project:Templates/Rules-Background.png');
					s.set('GameName-external-path', 'project:imagesRaw/' + card['ArtworkTop']);
					s.set('Name-external-path', 'project:imagesRaw/' + card['ArtworkBottom']);
					s.set('Name-portrait-clip-region', '50,423,313,108');
					s.set('PageIn-region', '48,488,317,15');
					s.set('PageIn-format', '<right><bottom><family "Times New Roman"><size 7><b>');
					s.set('LRL-IllustratorShort', ' ');
					s.set('Artist', ' ');
				}
				else if (cardType == 'Rules') {
					if (s.get('OptionRight').search('/') > -1) {
						s.set('LRL-Page', translate['Page'][lang]);
						s.set('LRL-PageOf', '<bs></size><size 3> </size><size 7>/</size><size 3> </size><size 7><bs>');
						s.set('PageNumber', s.get('OptionRight').split('/')[0]);
						s.set('PageTotal', s.get('OptionRight').split('/')[1]);
					}
					else {
						s.set('PageNumber', 0);
						s.set('PageTotal', 0);
					}
					if (s.get('OptionRightBack') == '') {
						s.set('PageBackShow', 'false');
					}

					s.set('Name', '');
					s.set('Story', '');
					s.set('StoryBack', '');
					s.set('Flavour', '');
					s.set('FlavourBack', '');

					s.set('Body-style', 'FOREGROUND: #000000; WIDTH: REGULAR; TRACKING: -0.005; FAMILY: {Eons.namedObjects.LRL.BodyFont}; SIZE: 7.5');
					s.set('Body-pointsize', 7.5);
					s.set('Rules-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('RulesBack-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('VerticalSpacer-tag-replacement', '<image res://TheLordOfTheRingsLCG/image/empty1x1.png 0.1 0.1>');
					s.set('Body-lineTightness', 0.8);
					s.set('Body-region', '48,73,317,418');
					s.set('Background-external-path', 'project:Templates/Rules-Background.png');
					s.set('BackgroundBack-external-path', 'project:Templates/Rules-Background.png');
					s.set('PageIn-region', '48,488,317,15');
					s.set('PageIn-format', '<right><bottom><family "Times New Roman"><size 7><b>');
				}
				else if (cardType == 'Contract') {
					s.set('Body-style', 'FOREGROUND: #000000; WIDTH: REGULAR; TRACKING: -0.005; FAMILY: {Eons.namedObjects.LRL.BodyFont}; SIZE: 7.5');
					s.set('Body-pointsize', 7.5);
					s.set('Rules-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('RulesBack-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('VerticalSpacer-tag-replacement', '<image res://TheLordOfTheRingsLCG/image/empty1x1.png 0.075 0.075>');
					s.set('Body-lineTightness', 0.2);
					s.set('Body-region', '65,313,283,176');
					s.set('Side-region', '0,279,413,17');
					s.set('Side-style', 'FAMILY: {"Vafthrudnir"}');
					s.set('Side-pointsize', 3.52);
					s.set('SideA', updateVafthrudnir(translate['Side'][lang].toUpperCase() + ' A', 3.515));
					s.set('SideB', updateVafthrudnir(translate['Side'][lang].toUpperCase() + ' B', 3.515));

					if (card['BName']) {
						s.set('Template', 'DoubleSided');
					}
					else {
						s.set('Template', 'Neutral');
					}
				}
				else if (landscapeTypes.indexOf(cardType) > -1) {
					s.set('Body-style', 'FOREGROUND: #000000; WIDTH: REGULAR; TRACKING: -0.005; FAMILY: {Eons.namedObjects.LRL.BodyFont}; SIZE: 7');
					s.set('Body-pointsize', 7);
					s.set('Rules-format', '<left><tracking -0.005><family "Times New Roman"><size 7>');
					s.set('RulesBack-format', '<left><tracking -0.005><family "Times New Roman"><size 7>');
					s.set('VerticalSpacer-tag-replacement', '<image res://TheLordOfTheRingsLCG/image/empty1x1.png 0.075 0.075>');
					s.set('Body-lineTightness', 0.2);
					s.set('Story-format', '<left><size 7><i>');
					s.set('StoryBack-format', '<left><size 7><i>');
					s.set('Story-formatEnd', '</i></size>');
					s.set('StoryBack-formatEnd', '</i></size>');
					s.set('Stage-region', '45,44,60,42');
					s.set('EncounterSet1-portrait-clip-region', '450,213,20,20');
					s.set('EncounterSet2-portrait-clip-region', '426,213,20,20');
					s.set('EncounterSet3-portrait-clip-region', '402,213,20,20');
					s.set('EncounterSet4-portrait-clip-region', '378,213,20,20');
					s.set('EncounterSet5-portrait-clip-region', '354,213,20,20');

					if (cardType in bodyRegion) {
						s.set('Body-region', bodyRegion[cardType]);
					}
				}
				else {
					s.set('Body-style', 'FOREGROUND: #000000; WIDTH: REGULAR; TRACKING: -0.005; FAMILY: {Eons.namedObjects.LRL.BodyFont}; SIZE: 7.5');
					s.set('Body-pointsize', 7.5);
					s.set('Rules-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('RulesBack-format', '<left><tracking -0.005><family "Times New Roman"><size 7.5>');
					s.set('VerticalSpacer-tag-replacement', '<image res://TheLordOfTheRingsLCG/image/empty1x1.png 0.075 0.075>');
					s.set('Body-lineTightness', 0.2);
					s.set('TraitOut', 'true');

					if (cardType in bodyRegion) {
						s.set('TraitOut-Body-region', bodyRegion[cardType]);
					}

					if (cardType in traitRegion) {
						s.set('TraitOut-Trait-region', traitRegion[cardType]);
					}
				}

				if (cardType == 'Quest') {
					s.set('NameShare', 0);
				}

				if ((cardType == 'Presentation') || (cardType == 'Rules')) {
					s.set('Type', ' ');
					s.set('Copyright', '');
					s.set('Collection', 'Empty');
				}
				else {
					if ((cardType == 'Campaign') && (cardSphere == 'Setup')) {
						s.set('Type', updateVafthrudnir(translate['Setup'][lang].toUpperCase(), 5.095));
						s.set('Template', 'Standard');
					}
					else {
						s.set('Type', updateVafthrudnir(translate[cardType][lang].toUpperCase(), 5.095));
					}

					s.set('Copyright', copyrightText);

					let selectedIcon;
					if (card['Collection Icon']) {
						selectedIcon = card['Collection Icon'];
					}
					else if (setIcon + '') {
						selectedIcon = setIcon;
					}
					else {
						selectedIcon = card['Set'];
					}
					let iconName = fixSpecialSymbols(selectedIcon).replace(/ /g, '-') + '_stroke';
					if (icons.indexOf(iconName) > -1) {
						s.set('Collection', 'Custom');
						s.set('Collection-external-path', 'project:imagesIcons/' + iconName + '.png');
					}
					else {
						let iconName = fixSpecialSymbols(selectedIcon).replace(/ /g, '-');
						if (icons.indexOf(iconName) > -1) {
							s.set('Collection', 'Custom');
							s.set('Collection-external-path', 'project:imagesIcons/' + iconName + '.png');
						}
						else {
							s.set('Collection', convertIconName(selectedIcon));
						}
					}
				}

				if (cardType in portraitRegion) {
					s.set('Portrait-portrait-clip-region', portraitRegion[cardType]);
					if (doubleSideTypes.indexOf(cardType) > -1) {
						s.set('PortraitBack-portrait-clip-region', portraitRegion[cardType]);
					}
				}

				if (s.get('Unique') + '') {
					if (cardType in nameRegionUnique) {
						s.set('Name-region', nameRegionUnique[cardType]);
					}
				}
				else {
					if (cardType in nameRegion) {
						s.set('Name-region', nameRegion[cardType]);
					}
				}

				if (cardType in namePointSize) {
					s.set('Name-pointsize', Math.round(namePointSize[cardType] * 1.734 * 100) / 100);
				}

				if (cardType in hitPointsRegion) {
					s.set('HitPoints-region', hitPointsRegion[cardType]);
				}

				if (cardType in attackRegion) {
					s.set('Attack-region', attackRegion[cardType]);
				}

				if (cardType in defenseRegion) {
					s.set('Defense-region', defenseRegion[cardType]);
				}

				if (cardType in willpowerRegion) {
					s.set('Willpower-region', willpowerRegion[cardType]);
				}

				if (cardType in threatRegion) {
					s.set('Threat-region', threatRegion[cardType]);
				}

				if (cardType in progressRegion) {
					s.set('Progress-region', progressRegion[cardType]);
				}

				if (cardType in adventureRegion) {
					s.set('Adventure-region', adventureRegion[cardType]);
				}

				if (cardType in resourceCostRegion) {
					s.set('ResourceCost-region', resourceCostRegion[cardType]);
				}

				if (cardType in encounterPortraitRegion) {
					s.set('EncounterSet-portrait-clip-region', encounterPortraitRegion[cardType]);
				}

				if (cardType in encounterNumberRegion) {
					s.set('EncounterSetNumber-region', encounterNumberRegion[cardType]);
				}

				if (cardType in optionBodyShape) {
					s.set('Option-Body-shape', optionBodyShape[cardType]);
				}

				if (cardType in optionRightDecorationRegion) {
					s.set('OptionRightDecoration-region', optionRightDecorationRegion[cardType]);
				}

				if (cardType in optionRightRegion) {
					s.set('OptionRight-region', optionRightRegion[cardType]);
				}

				if (nonUniqueTypes.indexOf(cardType) > -1) {
					s.set('Unique', '');
				}

				if (side == 'front') {
					if (card['Artwork']) {
						s.set('Portrait-external-path', 'project:imagesRaw/' + card['Artwork']);
						if (card['PanX'] && card['PanY'] && card['Scale']) {
							s.set('Portrait-external-panx', card['PanX']);
							s.set('Portrait-external-pany', card['PanY']);
							s.set('Portrait-external-scale', card['Scale'] / 100);
						}
					}
					if ((cardType == 'Quest') || (cardType == 'Contract')) {
						if (card['BArtwork'] && (card['BArtwork'] != card['Artwork'])) {
							s.set('PortraitBack-external-path', 'project:imagesRaw/' + card['BArtwork']);
							s.set('PortraitShare', 0);
							if (card['BPanX'] && card['BPanY'] && card['BScale']) {
								s.set('PortraitBack-external-panx', card['BPanX']);
								s.set('PortraitBack-external-pany', card['BPanY']);
								s.set('PortraitBack-external-scale', card['BScale'] / 100);
							}
						}
						else if (card['Artwork']) {
							s.set('PortraitBack-external-path', 'project:imagesRaw/' + card['Artwork']);
							if (card['PanX'] && card['PanY'] && card['Scale']) {
								s.set('PortraitBack-external-panx', card['PanX']);
								s.set('PortraitBack-external-pany', card['PanY']);
								s.set('PortraitBack-external-scale', card['Scale'] / 100);
							}
						}
					}
				}
				else {
					if (card['BArtwork']) {
						s.set('Portrait-external-path', 'project:imagesRaw/' + card['BArtwork']);
						if (card['BPanX'] && card['BPanY'] && card['BScale']) {
							s.set('Portrait-external-panx', card['BPanX']);
							s.set('Portrait-external-pany', card['BPanY']);
							s.set('Portrait-external-scale', card['BScale'] / 100);
						}
					}
				}

				if (card['Encounter Set']) {
					let iconName = fixSpecialSymbols(card['Encounter Set']).replace(/ /g, '-');
					if (icons.indexOf(iconName) > -1) {
						s.set('EncounterSet', 'Custom');
						s.set('EncounterSet-external-path', 'project:imagesIcons/' + iconName + '.png');
					}
					else {
						s.set('EncounterSet', convertIconName(card['Encounter Set']));
					}
				}
				if (card['Additional Encounter Sets']) {
					let encounterSets = card['Additional Encounter Sets'].split(';');
					for (let k = 0; k < encounterSets.length; k++) {
						let iconName = fixSpecialSymbols(encounterSets[k].trim()).replace(/ /g, '-');
						if (icons.indexOf(iconName) > -1) {
							s.set('EncounterSet' + (k + 1), 'Custom');
							s.set('EncounterSet' + (k + 1) + '-external-path',
								'project:imagesIcons/' + iconName + '.png');
						}
						else {
							s.set('EncounterSet' + (k + 1), convertIconName(encounterSets[k].trim()));
						}
					}
				}

				if (['Boon', 'Burden'].indexOf(cardSphere) > -1) {
					s.set('Subtype', updateVafthrudnir(translate[cardSphere][lang].toUpperCase(), 3.515));
				}

				if (card['Encounter Set Number']) {
					s.set('EncounterSetNumber', parseInt(card['Encounter Set Number']) + j);
				}
				if (card['Encounter Set Total']) {
					s.set('EncounterSetTotal', card['Encounter Set Total']);
				}

				if (card['Removed for Easy Mode'] && j >= parseInt(card['Quantity']) - parseInt(card['Removed for Easy Mode'])) {
					s.set('Difficulty', 'Gold');
				}

				let copy;
				if (playerCopies) {
					copy = 'p';
				}
				else {
					copy = j + 1;
				}

				let back;
				let simple_back;
				if (side == 'back') {
					back = '-';
					simple_back = true;
				}
				else if (cardType == 'Contract') {
					if (card['BName']) {
						back = '-';
						simple_back = false;
					}
					else {
						back = 'p';
						simple_back = true;
					}
				}
				else if (doubleSideTypes.indexOf(cardType) > -1) {
					back = '-';
					simple_back = false;
				}
				else if (card['BName']) {
					back = '-';
					simple_back = true;
				}
				else if (playerTypes.indexOf(cardType) > -1 &&
					(keywords + '').replace('. ', '.').split('.').indexOf(translate['Encounter Keyword'][lang]) == -1) {
					back = 'p';
					simple_back = true;
				}
				else {
					back = 'e';
					simple_back = true;
				}

				let fname = (Array(Math.max(0, 4 - (card['Card Number'] + '').length)).join('0') + card['Card Number'] + '-' + copy + '-' +
					back + '-' + escapeFileName(card['Name']) + Array(50).join('-')).substring(0, 50) + card['octgn'] + suffix;
				progress.status = fname;
				ResourceKit.writeGameComponentToFile(new File(getProjectMember('Cards/').file, fname + '.' + setID + '.' + lang + '.eon'), newCard);
				exportCard(newCard, fname, setID, lang, simple_back, png300Bleed, png800Bleed);
			}
		}
	}
	return;
}

function exportCard(card, fname, setID, lang, simple_back, png300Bleed, png800Bleed) {
	var sheets = card.createDefaultSheets();
	var numSheets;
	if (simple_back) {
		numSheets = 1;
	}
	else {
		numSheets = 2;
	}

	var ppi300 = 300;
	var ppi800 = 800;
	for (let i = 0; i < numSheets; i++ ) {
		let bi, file;

		if (png300Bleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, ppi300, true);
			file = new File(getProjectMember('Export/png300Bleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_PNG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_PNG, 1, false, ppi300);
		}

		if (png800Bleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, ppi800, true);
			file = new File(getProjectMember('Export/png800Bleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_PNG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_PNG, 1, false, ppi800);
		}
	}
}

function fixSpecialSymbols(value) {
	value = value + '';
	value = value.replace(/\u00c2/g, 'A');
	value = value.replace(/\u00e2/g, 'a');
	value = value.replace(/[\u00da\u00db]/g, 'U');
	value = value.replace(/[\u00fa\u00fb]/g, 'u');
	value = value.replace(/[,\(\)'"\u2013\u2014\u2026\u2019\u201c\u201d]/g, '');
	return value;
}

function capitalizeWord(value) {
	return value.charAt(0).toUpperCase() + value.slice(1);
}

function capitalizeText(value) {
	value = value + '';
	value = value.split(' ').map(capitalizeWord).join(' ');
	value = value.split('-').map(capitalizeWord).join('-');
	return value;
}

function convertIconName(value) {
	value = fixSpecialSymbols(value);
	value = capitalizeText(value);
	value = value.replace(/[\-\u2013\u2014 ]/g, '');
	return value;
}

function escapeFileName(value) {
	value += '';
	return value.replace(/[<>:\/\\|?*'"\u2013\u2014\u2026\u2019\u201c\u201d]/g, ' ');
}

function updateVafthrudnir(value, lowerSize) {
	var upperSize = Math.round(lowerSize * 1.423 * 100) / 100;
	var res = '';
	var tag = false;
	for (let i = 0; i < value.length; i++) {
		let ch = value[i];
		if (ch == '<') {
			res += ch;
			tag = true;
		}
		else if (ch == '>') {
			res += ch;
			tag = false;
		}
		else if (tag) {
			res += ch;
		}
		else if ((ch == ch.toLowerCase()) && !ch.match(/[&0-9;:,.!?\-\u2013\(\)'\u2019"\u201c\u201d \u00a0]/)) {
			if (ch.match(/[a-z&0-9;:,.!? ]/i)) {
				res += ch.toUpperCase();
			}
			else {
				res += '</family><family "Vafthaurdir">' + ch.toUpperCase() + '</family><family "Vafthrudnir">';
			}
		}
		else {
			if (ch.match(/[a-z&0-9;:,.!? ]/i)) {
				res += '</size><size ' + upperSize + '>' + ch + '</size><size ' + lowerSize + '>';
			}
			else {
				res += '</size></family><family "Vafthaurdir"><size ' + upperSize + '>' + ch + '</size></family><family "Vafthrudnir"><size ' + lowerSize + '>';
			}
		}
	}
	res = '<family "Vafthrudnir"><size ' + lowerSize + '>' + res + '</size></family>';
	res = res.replace(/<size [^>]+><\/size>/g, '');
	res = res.replace(/<family [^>]+><\/family>/g, '');
	return res;
}

function markUp(vXml, nXml, lang, setID, cardType) {
	vXml += '';
	vXml = vXml.replace(/ +(?=\n|$)/g, '');
	vXml = vXml.replace(/\n+$/g, '');
	vXml = vXml.replace(/\[nobr\]/ig, '\u00a0');
	vXml = vXml.replace(/\[inline\]\n\n/ig, ' ');
	vXml = vXml.replace(/\[inline\]/ig, '');

	if (['Name', 'BName'].indexOf(nXml + '') > -1) {
		let lowerSize;
		if (cardType in namePointSize) {
			lowerSize = namePointSize[cardType];
		}
		else {
			lowerSize = 6.5;
		}
		return updateVafthrudnir(vXml, lowerSize);
	}
	else if ((['Victory Points', 'BVictory Points'].indexOf(nXml + '') > -1) && (['Presentation', 'Rules'].indexOf(cardType) == -1)) {
		return updateVafthrudnir(vXml, 3.69);
	}
	else if (nXml == 'Adventure') {
		if (cardType == 'Campaign') {
			return updateVafthrudnir(vXml, 6.5);
		}
		else {
			return updateVafthrudnir(vXml, 3.69);
		}
	}

	if (lang == 'English') {
		vXml = vXml.replace(/\b(Quest Resolution)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(Valour )?(Resource |Planning |Quest |Travel |Encounter |Combat |Refresh )?(Action):/g, '[b]$1$2$3[/b]:');
		vXml = vXml.replace(/\b(When Revealed|Setup|Forced|Valour Response|Response|Travel|Shadow|Resolution):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Condition)\b/g, '[bi]$1[/bi]');
	}
	else if (lang == 'French') {
		vXml = vXml.replace(/\b(R\u00e9solution de la qu\u00eate)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(\[Vaillance\] )?(\[Ressource\] |\[Organisation\] |\[Qu\u00eate\] |\[Voyage\] |\[Rencontre\] |\[Combat\] |\[Restauration\] )?(Action):/g, '[b]$1$2$3[/b]:');
		vXml = vXml.replace(/\b(Une fois r\u00e9v\u00e9l\u00e9e|Mise en place|Forc\u00e9|\[Vaillance\] R\u00e9ponse|R\u00e9ponse|Trajet|Ombre|R\u00e9solution):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Condition)\b/g, '[bi]$1[/bi]');
	}
	else if (lang == 'German') {
		vXml = vXml.replace(/\b(Abenteuer bestehen)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(Ehrenvolle )?(Ressourcenaktion|Planungsaktion|Abenteueraktion|Reiseaktion|Begegnungsaktion|Kampfaktion|Auffrischungsaktion|Aktion):/g, '[b]$1$2[/b]:');
		vXml = vXml.replace(/\b(Wenn aufgedeckt|Vorbereitung|Erzwungen|Ehrenvolle Reaktion|Reaktion|Reise|Schatten|Aufl\u00f6sung):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Zustand)\b/g, '[bi]$1[/bi]');
	}
	else if (lang == 'Spanish') {
		vXml = vXml.replace(/\b(Resoluci\u00f3n de la misi\u00f3n)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(Acci\u00f3n)( de Recursos| de Planificaci\u00f3n| de Misi\u00f3n| de Viaje| de Encuentros| de Combate| de Recuperaci\u00f3n)?( de Valor)?:/g, '[b]$1$2$3[/b]:');
		vXml = vXml.replace(/\b(Al ser revelada|Preparaci\u00f3n|Obligado|Respuesta de Valor|Respuesta|Viaje|Sombra|Resoluci\u00f3n):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Condici\u00f3n)\b/g, '[bi]$1[/bi]');
	}
	else if (lang == 'Polish') {
		vXml = vXml.replace(/\b(Rozpatrzenie wyprawy)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(Akcja)( Zasob\u00f3w| Planowania| Wyprawy| Podr\u00f3\u017cy| Spotka\u0144| Walki| Odpoczynku)?( M\u0119stwa)?:/g, '[b]$1$2$3[/b]:');
		vXml = vXml.replace(/\b(Po odkryciu|Przygotowanie|Wymuszony|Odpowied\u017a M\u0119stwa|Odpowied\u017a|Podr\u00f3\u017c|Cie\u0144|Nast\u0119pstwa):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Stan)\b/g, '[bi]$1[/bi]');
	}
	else if (lang == 'Italian') {
		vXml = vXml.replace(/\b(Risoluzione della Ricerca)( \([^\)]+\))?:/g, '[b]$1[/b]$2:');
		vXml = vXml.replace(/\b(Azione)( Valorosa)?( di Risorse| di Pianificazione| di Ricerca| di Viaggio| di Incontri| di Combattimento| di Riordino)?:/g, '[b]$1$2$3[/b]:');
		vXml = vXml.replace(/\b(Quando Rivelata|Preparazione|Obbligato|Risposta Valorosa|Risposta|Viaggio|Ombra|Risoluzione):/g, '[b]$1[/b]:');
		vXml = vXml.replace(/\b(Condizione)\b/g, '[bi]$1[/bi]');
	}

	var defaultFontSize;
	if (landscapeTypes.indexOf(cardType) > -1) {
		defaultFontSize = 7;
	}
	else if (['Flavour', 'BFlavour'].indexOf(nXml + '') > -1) {
		defaultFontSize = 6.25;
	}
	else if (['Traits', 'BTraits'].indexOf(nXml + '') > -1) {
		defaultFontSize = 8.25;
	}
	else {
		defaultFontSize = 7.5;
	}
	var matchRegExp = /^\[defaultsize ([0-9\.]+)\]/ig;
	var match = matchRegExp.exec(vXml);
	if (match) {
		defaultFontSize = match[1];
	}
	var iconFontSize = defaultFontSize * 1.2;

	var tagPrefix;
	var tagSuffix;
	if (['Traits', 'BTraits'].indexOf(nXml + '') > -1) {
		vXml = vXml.replace(/\[bi\](.*?)\[\/bi\]/ig, '$1');
		vXml = vXml.replace(/\[b\](.*?)\[\/b\]/ig, '$1');
		vXml = vXml.replace(/\[i\](.*?)\[\/i\]/ig, '$1');
		tagPrefix = '</b></i></size></family><size ' + iconFontSize + '>';
		tagSuffix = '</size><family "Times New Roman"><size ' + defaultFontSize + '><i><b>';
	}
	else if (['Shadow', 'BShadow', 'Flavour', 'BFlavour'].indexOf(nXml + '') > -1) {
		vXml = vXml.replace(/\[bi\](.*?)\[\/bi\]/ig, '[b]$1[/b]');
		vXml = vXml.replace(/\[i\](.*?)\[\/i\]/ig, '$1');
		tagPrefix = '</i></size></family><size ' + iconFontSize + '>';
		tagSuffix = '</size><family "Times New Roman"><size ' + defaultFontSize + '><i>';
	}
	else {
		tagPrefix = '</size></family><size ' + iconFontSize + '>';
		tagSuffix = '</size><family "Times New Roman"><size ' + defaultFontSize + '>';
	}

	vXml = vXml.replace(/</g, '[lt]');
	vXml = vXml.replace(/>/g, '[gt]');
	vXml = vXml.replace(/\[lt\]/g, '<lt>');
	vXml = vXml.replace(/\[gt\]/g, '<gt>');
	vXml = vXml.replace(/\[unique\]/ig, tagPrefix + '<uni>' + tagSuffix);
	vXml = vXml.replace(/\[threat\]/ig, tagPrefix + '<thr>' + tagSuffix);
	vXml = vXml.replace(/\[attack\]/ig, tagPrefix + '<att>' + tagSuffix);
	vXml = vXml.replace(/\[defense\]/ig, tagPrefix + '<def>' + tagSuffix);
	vXml = vXml.replace(/\[willpower\]/ig, tagPrefix + '<wil>' + tagSuffix);
	vXml = vXml.replace(/\[leadership\]/ig, tagPrefix + '<lea>' + tagSuffix);
	vXml = vXml.replace(/\[lore\]/ig, tagPrefix + '<lor>' + tagSuffix);
	vXml = vXml.replace(/\[spirit\]/ig, tagPrefix + '<spi>' + tagSuffix);
	vXml = vXml.replace(/\[tactics\]/ig, tagPrefix + '<tac>' + tagSuffix);
	vXml = vXml.replace(/\[baggins\]/ig, tagPrefix + '<bag>' + tagSuffix);
	vXml = vXml.replace(/\[fellowship\]/ig, tagPrefix + '<fel>' + tagSuffix);
	vXml = vXml.replace(/\[mastery\]/ig, tagPrefix + '<mas>' + tagSuffix);
	vXml = vXml.replace(/\[sunny\]/ig, tagPrefix + '<hon>' + tagSuffix);
	vXml = vXml.replace(/\[cloudy\]/ig, tagPrefix + '<hof>' + tagSuffix);
	vXml = vXml.replace(/\[rainy\]/ig, tagPrefix + '<hb>' + tagSuffix);
	vXml = vXml.replace(/\[stormy\]/ig, tagPrefix + '<hw>' + tagSuffix);
	vXml = vXml.replace(/\[sailing\]/ig, tagPrefix + '<sai>' + tagSuffix);
	vXml = vXml.replace(/\[eos\]/ig, tagPrefix + '<eos>' + tagSuffix);
	vXml = vXml.replace(/\[person\]/ig, tagPrefix + '<per>' + tagSuffix);
	vXml = vXml.replace(/\[pp\]/ig, tagPrefix + '<pp>' + tagSuffix);
	vXml = vXml.replace(/\[center\]/ig, '<center>');
	vXml = vXml.replace(/([^\n])\<center\>/ig, '$1\n<center>');
	vXml = vXml.replace(/\[\/center\]\n?/ig, '\n<left>');
	vXml = vXml.replace(/\[right\]/ig, '<right>');
	vXml = vXml.replace(/([^\n])\<right\>/ig, '$1\n<right>');
	vXml = vXml.replace(/\[\/right\]\n?/ig, '\n<left>');
	vXml = vXml.replace(/\<left\>(\n*)\<center\>/ig, '$1<center>');
	vXml = vXml.replace(/\<left\>(\n*)\<right\>/ig, '$1<right>');
	vXml = vXml.replace(/\n*\<left\>$/ig, '');
	vXml = vXml.replace(/\[bi\]/ig, '<i><b>');
	vXml = vXml.replace(/\[\/bi\]/ig, '</b></i>');
	vXml = vXml.replace(/\[b\]/ig, '<b>');
	vXml = vXml.replace(/\[\/b\]/ig, '</b>');
	vXml = vXml.replace(/\[i\]/ig, '<i>');
	vXml = vXml.replace(/\[\/i\]/ig, '</i>');
	vXml = vXml.replace(/\[u\]/ig, '<u>');
	vXml = vXml.replace(/\[\/u\]/ig, '</u>');
	vXml = vXml.replace(/\[strike\]/ig, '<del>');
	vXml = vXml.replace(/\[\/strike\]/ig, '</del>');
	vXml = vXml.replace(/\[red\]/ig, '<red>');
	vXml = vXml.replace(/\[\/red\]/ig, '</red>');
	vXml = vXml.replace(/\[space\]/ig, '<hs>');
	vXml = vXml.replace(/\[tab\]/ig, '\t');
	vXml = vXml.replace(/\[lotr ([0-9\.]+)\]/ig, '<lotr $1>');
	vXml = vXml.replace(/\[\/lotr\]/ig, '</lotr>');
	vXml = vXml.replace(/\[size ([0-9\.]+)\]/ig, '</size><size $1>');
	vXml = vXml.replace(/\[\/size\]/ig, '</size><size ' + defaultFontSize + '>');
	vXml = vXml.replace(/^\[defaultsize ([0-9\.]+)\]\n*/ig, '</size><size $1>');
	vXml = vXml.replace(/\[img ("?)([^\]]+)\]/ig, '<image $1project:$2>');
	vXml = vXml.replace(/\<image ("?)project:icons\//ig, '<image $1project:imagesIcons/');
	vXml = vXml.replace(/\<image ("?)project:custom\//ig, '<image $1project:imagesCustom/' + setID + '_');
	vXml = vXml.replace(/\[lsb\]/ig, '<lsb>');
	vXml = vXml.replace(/\[rsb\]/ig, '<rsb>');
	vXml = vXml.replace(/<lsb>/ig, '[');
	vXml = vXml.replace(/<rsb>/ig, ']');

	vXml = vXml.replace(/([^:;,.?!\u2026]) (<uni>|<thr>|<att>|<def>|<wil>|<lea>|<lor>|<spi>|<tac>|<bag>|<fel>|<mas>|<hon>|<hof>|<hb>|<hw>|<sai>|<eos>|<per>|<pp>)/g, '$1\u00a0$2');
	vXml = vXml.replace(/([0-9]+) /g, '$1\u00a0');
	vXml = vXml.replace(/ ([0-9]+)([:;,.?!\u2026])/g, '\u00a0$1$2');
	vXml = vXml.replace(/(^|[ \n"\u201c\u201d\(])([\-\u2013\u2014'\u2019A-Za-z\u00c0-\u017e]{1,4})([:;,.?!"\u2026\u201c\u201d\)]*) (["\u201c\u201d\(]*)([\-\u2013\u2014'\u2019A-Za-z\u00c0-\u017e]{1,4})([:;,.?!"\u2026\u201c\u201d\)]+)(\n|$)/g, '$1$2$3\u00a0$4$5$6$7');
	vXml = vXml.replace(/ (["\u201c\u201d\(]*)([\-\u2013\u2014'\u2019A-Za-z\u00c0-\u017e]{1,2})([:;,.?!"\u2026\u201c\u201d\)]+)(\n|$)/g, '\u00a0$1$2$3$4');

	// fix no-break space inside tags
	var vXmlOld;
	do {
		vXmlOld = vXml;
		vXml = vXml.replace(/\u00a0([^<]+)>/g, ' $1>');
	}
	while (vXml != vXmlOld);

	vXml = vXml.replace(/<\/i>(?! )/g, '</size><size 0.01></i>\u00a0</size><size ' + defaultFontSize + '>');
	vXml = vXml.replace(/<\/i>(?= )/g, '</size><size 0.01></i> </size><size ' + defaultFontSize + '>');
	vXml = vXml.replace(/\n+$/g, '');
	vXml = vXml.replace(/\n(<left>|<right>|<center>)?(?=\n)/g, '\n$1<vs>');

	function updateVafthrudnirReplacer(match, p1, p2, offset, string) {
		var res = '</size></family>' + updateVafthrudnir(p2, p1) + '<family "Times New Roman"><size ' + defaultFontSize + '>';
		return res;
	}

	vXml = vXml.replace(/<lotr ([0-9\.]+)>(.*?)<\/lotr>/ig, updateVafthrudnirReplacer);
	vXml = vXml.replace(/<size [^>]+><\/size>/g, '');
	vXml = vXml.replace(/<family [^>]+><\/family>/g, '');
	return vXml;
}

function getProjectMember(path) {
	var member = project.findChild(path);
	if (member == null) {
		throw new Error('Missing required project file: ' + path);
	}
	return member;
}