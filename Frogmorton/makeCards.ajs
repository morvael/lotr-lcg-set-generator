useLibrary('project:common.js');
useLibrary('imageutils');
useLibrary('threads');
importPackage(arkham.project);
importClass(java.io.File);
importClass(javax.xml.parsers.DocumentBuilderFactory);

function getProjectMember(path) {
	var member = project.findChild(path);
	if (member == null) {
		throw new Error('Missing required project file: ' + path);
	}
	return member;
}

function exportCard(card, fname, setID, lang, simple_back, png300Bleed, png480Bleed, png800Bleed) {
	var sheets = card.createDefaultSheets();
	var numSheets;
	if (simple_back) {
		numSheets = 1;
	}
	else {
		numSheets = 2;
	}

	var ppi300 = 300;
	var ppi480 = 480;
	var ppi800 = 800;
	for (let i = 0; i < numSheets; i++ ) {
		let bi, file;

		if (png300Bleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, ppi300, true);
			file = new File(getProjectMember('Export/png300Bleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_PNG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_PNG, 1, false, ppi300);
		}

		if (png480Bleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, ppi480, true);
			file = new File(getProjectMember('Export/png480Bleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_PNG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_PNG, 1, false, ppi480);
		}

		if (png800Bleed) {
			bi = sheets[i].paint(arkham.sheet.RenderTarget.EXPORT, ppi800, true);
			file = new File(getProjectMember('Export/png800Bleed/').file, fname + '-' + (i + 1) + '.' + setID + '.' + lang + '.' + ImageUtils.FORMAT_PNG);
			ImageUtils.write(bi, file, ImageUtils.FORMAT_PNG, 1, false, ppi800);
		}
	}
}

function getCardObjectsSE(cardType) {
	var card = ResourceKit.getGameComponentFromFile(getProjectMember('Templates/' + cardType + '.eon').file, false);
	var settings = card.settings;  // set(), get()
	return [card, settings];
}

function saveResultSE(settings, setID, lang, card, fname, simple_back, png300Bleed, png480Bleed, png800Bleed) {
	ResourceKit.writeGameComponentToFile(new File(getProjectMember('Cards/').file, fname + '.' + setID + '.' + lang + '.eon'), card);
	exportCard(card, fname, setID, lang, simple_back, png300Bleed, png480Bleed, png800Bleed);
}

function mainSE(progress, target) {
	var icons = [];
	var iconFiles = project.findChild('imagesIcons').iterator();
	while (iconFiles.hasNext()) {
		let icon = (iconFiles.next() + '').replace(/\.png$/g, '');
		icons.push(icon);
	}

	var xmlFiles = project.findChild('XML').iterator();
	while (xmlFiles.hasNext()) {
		var filename = xmlFiles.next() + '';
		var fXmlFile = new File(getProjectMember('XML/').file, filename + '.xml');
		// Console.err.println('\nReading ' + fXmlFile);
		var setID = filename.split('.')[0];
		var lang = filename.split('.')[1];
		var doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(fXmlFile);
		run('se', doc, setID, lang, icons, getCardObjectsSE, saveResultSE, progress);
	}
	var finishedFile = new File('.', 'makeCards_FINISHED');
	finishedFile.createNewFile();
}

Thread.busyWindow(mainSE, 'Updating cards...', true);